name: $(Date:yyyyMMdd)$(Rev:.r)

variables:
  - group: az-pipeline-config

pool: Azure Pipelines

stages:
  - stage: Build
    jobs:
    - job: Build
      pool:
          name: Azure Pipelines
      steps:
      - task: Bash@3
        displayName: Install .NET 
      - bash: |
          sudo apt-get update
          sudo apt-get install dotnet-sdk-6.0
          echo "Install .NET done!"
          dotnet --version
        displayName: Install .NET 6.0
      - task: Bash@3
        displayName: Build .NET project
      - bash: |
          cd $(System.DefaultWorkingDirectory)/fakerestapi/FakeRESTApi.Web
          dotnet build --configuration release
          echo "Build done"
        displayName: Install .NET 6.0
      - task: ArchiveFiles@2
        displayName: Archive FakeRestAPI
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi/FakeRESTApi.Web/bin/release/net6.0'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.BuildId)-fakerestapi.zip'
      - task: PublishPipelineArtifact@1
        displayName: Upload package
        inputs:   
          targetPath: $(Build.BuildId)-fakerestapi.zip
          artifact: drop-fakerestapi

      - task: ArchiveFiles@2
        displayName: Archive Selenium
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.BuildId)-selenium.zip'
          replaceExistingArchive: true
        
      - task: PublishPipelineArtifact@1
        displayName: Upload Selenium
        inputs:
         targetPath: $(Build.BuildId)-selenium.zip
         artifact: drop-selenium

      - deployment: test_on_vm
        displayName: UI testing
        environment:
         name: 'VM-TEST'
         resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  inputs:
                   targetType: inline
                   script: |
                    #!/bin/bash
                    chromium-browser -version
                    chromedriver --version
                    cd $(Pipeline.Workspace)/drop-selenium
                    unzip -o $(Build.BuildId)-selenium.zip
                    sudo mkdir -p /var/log/selenium
                    sudo chmod 664 /var/log/selenium
                    python3 uitest.py > ui-logs.log
                    python3 uitest.py
                    sudo mv ui-logs.log /var/log/selenium
                    cd $(System.DefaultWorkingDirectory)
                    mkdir -p log/selenium
                    sudo cp /var/log/selenium/ui-logs.log log/selenium
                - task: PublishPipelineArtifact@1
                  displayName: Publish selenium logs
                  inputs:
                    targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/ui-logs.log'
                    artifactName: 'drop-selenium-logs'
                    
      - job: Test_Post_man
        displayName: Postman Test
        pool:
          name: Azure Pipelines
        steps: 
          - task: NodeTool@0
            displayName: Install Node v16.X
            inputs:
              versionSpec: '16.x'
          - bash: |
              node -v
              sudo npm install -g newman
              newman -v
            displayName: Install Newman CLI
          - bash: |
                newman run automatedtesting/postman/StarterAPIs.json --reporters cli,junit --reporter-junit-export Results/RegressionTests.xml --suppress-exit-code
            displayName: Run Regression Test
          - task: CmdLine@2
            inputs:
              script: 'ls'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
          - task: PublishTestResults@2
            displayName: Publish report postman
            condition: always()
            inputs:
             testResultsFormat: JUnit
             testResultsFiles: '$(System.DefaultWorkingDirectory)/Results/*.xml'

      - job: Test_Jmeter
        displayName: Performance testing
        pool:
          name: Azure Pipelines
        steps:
          - bash: |
              sudo apt-get install openjdk-11-jre-headless -y
              java -version
              wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz -O jmeter.tgz
              tar xzvf jmeter.tgz
              echo "####################"
              echo "jmeter version : " 
              apache-jmeter-5.5/bin/jmeter --version   
              echo "####################"
              mkdir -p log/jmeter
              pwd
              ls -la
              ls '$(Pipeline.Workspace)/s'
            displayName: Install JMeter
          - bash: |
              apache-jmeter-5.5/bin/jmeter -n -t automatedtesting/jmeter/StressTest.jmx -l log/jmeter/stress-test-result.csv -e -f -o log/jmeter/stress-test-html-report -j log/jmeter/jmeter-stress-test.log
              cat log/jmeter/jmeter-stress-test.log
              ls '$(Pipeline.Workspace)/s'
              ls '$(Pipeline.Workspace)/s/automatedtesting/jmeter'
            displayName: Stress Test
          - bash: |
              apache-jmeter-5.5/bin/jmeter -n -t automatedtesting/jmeter/EnduranceTest.jmx -l log/jmeter/endurance-test-result.csv -e -f -o log/jmeter/endurance-test-html-report -j log/jmeter/jmeter-endurance-test.log
              cat log/jmeter/jmeter-endurance-test.log
            displayName: Endurance Test
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'automatedtesting/jmeter'
              ArtifactName: 'jmeter'
              publishLocation: 'Container'  